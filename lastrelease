#!/usr/bin/python

from   __future__ import print_function
import sys
import re
import os
import pytz
from   datetime import datetime
from   argparse import ArgumentParser

trunk_re = 'trunk'

def get_popen (cmd) :
    """ return stripped stdout from external command """
    fd  = os.popen (cmd)
    ret = fd.read ().strip ()
    fd.close ()
    return ret
# end def get_popen

def get_timezone () :
    """ For now read /etc/timezone, there should be other ways on
        different operating systems and an environment variable should
        also be possible for overrides...
    """
    tz = open ('/etc/timezone', 'r').readline ().strip ()
    return pytz.timezone (tz)
# end def get_timezone

class VC (object) :
    """ Convention: A revision is name_X_Y where name is the released
        revision and X and Y are major and minor number.
    """

    def __init__ (self, name = None, do_notag = True, tag_re = None) :
        self.name     = name
        self.do_notag = do_notag
        self.tag_re   = tag_re
        self.annotate = ''
        if self.do_notag :
            self.annotate = 'NO_TAG_'
    # end def __init__

# end class VC


class SVN (VC) :

    tag_re = 'tags/([^/]*(release|V)[_-][^_-]*[_-]?([0-9]+[_.-][0-9]+))'

    def __init__ (self, name = None, do_notag = True, tag_re = tag_re) :
        VC.__init__ (self, name, do_notag, tag_re)
    # end def __init__

    def author (self) :
        line = get_popen ("svn info | grep '^Last Changed Author:'")
        return line.split (':', 1) [1].strip ()
    # end def author

    def commit_date (self) :
        line = get_popen ("svn info | grep '^Last Changed Date:'")
        d, t = line.split (':', 1) [1].split (' ') [1:3]
        dt = datetime.strptime (' '.join ((d, t)), '%Y-%m-%d %H:%M:%S')
        return dt
    # end def commit_date

    def up_to_date_rev (self) :
        url        = get_popen ("svn info | grep '^URL'")
        rev        = get_popen ("svnversion -c .").rstrip ("S")
        rev        = rev.split (':') [-1]
        suffix     = '$'
        if self.name :
            suffix = '/%s$' % self.name
        tag_rgx    = re.compile (self.tag_re + suffix)
        trunk_rgx  = re.compile (trunk_re    + suffix)
        m   = tag_rgx.search (url)
        if m :
            if rev.endswith ("M") :
                return "%s%s_%s" % (self.annotate, m.group (3), rev)
            return "V_%s_%s" % (m.group (3), rev)
        m   = trunk_rgx.search (url)
        if m :
            return "%s%s" % (self.annotate, rev)
        return "NO_TAG"
    # end def up_to_date_rev

# end class SVN

class GIT (VC) :
    """ For git we ignore the notag option when there are earlier tags
        as git has a better way to express derivation from the last
        tagged version. The case that no name is given is the default
        with git, so we have tags of the form V_X_Y where X and Y are
        the version numbers.
    """

    def __init__ (self, name = None, do_notag = True, tag_re = None) :
        VC.__init__ (self, name, do_notag, tag_re)
    # end def __init__

    def author (self) :
        line = get_popen ('git log -n 1 | grep "^Author:"')
        return line.split (':', 1) [1].strip ()
    # end def author

    def commit_date (self) :
        line  = get_popen ('git log -n 1 | grep "^Date:"')
        d     = line.split (':', 1) [1].strip ()
        d, tz = d.rsplit (None, 1)
        assert tz.endswith ('00')
        tz    = str (-int (tz [:-2], 10))
        if not tz.startswith ('-') :
            tz = '+' + tz
        tz    = pytz.timezone ('Etc/GMT%s' % tz)
        dt    = datetime.strptime (d, '%a %b %d %H:%M:%S %Y')
        dt    = dt.replace (tzinfo = tz)
        dt    = dt.astimezone (get_timezone ())
        return dt
    # end def commit_date

    def up_to_date_rev (self) :
        """ We find the first version on the *first* parent tree.
            This excludes versions on a different tree resulting from a
            merge. For discussion see
            http://www.xerxesb.com/2010/git-describe-and-the-tale-of-the-wrong-commits/
        """
        name = self.name.split ('/')[0] or 'V'
        prg  = 'git log --oneline --decorate=short --first-parent'
        if self.tag_re :
            rgx  = re.compile \
                (r"tag:\s+((%s)[^ ),]*)" % self.tag_re)
        else :
            rgx  = re.compile \
                (r"tag:\s+(((release_)?%s|%s)[^ ),]*)" % (name, name.upper ()))
        for line in get_popen (prg).split ('\n') :
            m = rgx.search (line)
            if m :
                break
        else :
            line = get_popen ('git log -n1 | grep "^commit"').strip ()
            return self.annotate + line.split (None, 1) [1]
        line = get_popen ('git describe --tags --dirty=-modified --match="%s"'
            % m.group (1)
            )
        found = False
        for prefix in '', 'release_' :
            for n in name, name.upper () :
                pn = prefix + n
                if not found and line.startswith (pn) :
                    line  = line [len (pn):]
                    found = True
        if line.startswith (name) or line.startswith (name.upper ()) :
            line = line [len (name):]
        if line [0] in '-_' :
            line = line [1:]
        return line.strip ()
    # end def up_to_date_rev

# end class GIT

if __name__ == "__main__" :
    parser = ArgumentParser ()
    parser.add_argument \
        ( "project"
        , help    = "Name of the project in version control system"
        , nargs   = '?'
        , default = ''
        )
    parser.add_argument \
        ( "-A", "--override-author"
        , dest    = "override_author"
        , help    = "Override Author"
        )
    parser.add_argument \
        ( "-a", "--author"
        , dest    = "author"
        , help    = "Display author"
        , default = False
        , action  = "store_true"
        )
    parser.add_argument \
        ( "-n", "--no-notag"
        , dest    = "do_notag"
        , help    = '''Don't use "NO_TAG" if not an svn tag'''
        , default = True
        , action  = "store_false"
        )
    parser.add_argument \
        ( "-d", "--date"
        , dest    = "date"
        , help    = "Output date of last commit"
        , default = False
        , action  = "store_true"
        )
    parser.add_argument \
        ( "-D", "--verbosedate"
        , dest    = "verbosedate"
        , help    = "Verbose date format"
        , default = False
        , action  = "store_true"
        )
    parser.add_argument \
        ( "-r", "--tag-re"
        , dest    = "tag_re"
        , help    = "Tag regular expression"
        )
    parser.add_argument \
        ( "-s", "--re-structured-text"
        , dest    = "rest_format"
        , help    = "Output tag and date of last commit in ReST format"
        , default = False
        , action  = "store_true"
        )
    parser.add_argument \
        ( "-t", "--tex-format"
        , dest    = "tex_format"
        , help    = "Output tag and date of last commit in TeX format"
        , default = False
        , action  = "store_true"
        )
    args = parser.parse_args ()
    mode = 'git'
    try :
        mode = os.stat ('.svn')
    except OSError :
        pass
    if mode == 'git' :
        vc = GIT (args.project, args.do_notag, tag_re = args.tag_re)
    else :
        vc = SVN (args.project, args.do_notag, tag_re = args.tag_re)
    if args.tex_format :
        r = vc.up_to_date_rev ()
        if r.endswith ('M') :
            r = r.replace ('M', ' (modified)')
        r = r.replace ('_', '-')
        if not r.startswith ('V') :
            r = 'V.%s' % r
        print ("\\renewcommand{\\revision}{%s }" % r)
        d = vc.commit_date ()
        print (d.strftime ("\\def\\runtuxdate{\\formatdate{%d}{%m}{%Y}}"))
    elif args.rest_format :
        r = vc.up_to_date_rev ()
        if r.endswith ('M') :
            r = r.replace ('M', ' (modified)')
        r = r.replace ('_', '-')
        d = vc.commit_date ()
        a = args.override_author or vc.author ()
        print (":Author: %s"   % a)
        print (":Revision: %s" % r)
        if args.verbosedate :
            print (":Date: %s" % d.strftime ("%Y-%m-%d %H:%M:%S %z"))
        else :
            print (":Date: %s" % d.strftime ("%Y-%m-%d"))
    elif args.date :
        print (vc.commit_date ().strftime ('%Y-%m-%d'))
    elif args.author :
        print (args.override_author or vc.author ())
    else :
        print (vc.up_to_date_rev ())
